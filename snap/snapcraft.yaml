# snapcraft.yaml - builds a Snap package of BootJDK
# Copyright (C) 2021-2024 John Neffenger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: bootjdk
title: BootJDK
summary: Boot JDK for building OpenJDK Snap package
description: |
  This package is obsolete. For the current JDK release and
  early-access builds, install the following package instead:

  https://snapcraft.io/openjdk

  For more information, see the README file for this package on GitHub:

  https://github.com/jgneff/bootjdk

  Java and OpenJDK are trademarks or registered trademarks of Oracle
  and/or its affiliates.

adopt-info: jdk
license: GPL-2.0-with-classpath-exception

base: core18
grade: stable
confinement: strict

architectures:
- build-on: amd64
- build-on: arm64
- build-on: armhf
- build-on: i386
- build-on: ppc64el
- build-on: s390x

slots:
  jdk-19-1804:
    interface: content
    read: [$SNAP/jdk]
  jdk-20-1804:
    interface: content
    read: [$SNAP/jdk]

plugs:
  home: null

apps:
  bootjdk:
    command: bin/openjdk.sh
    environment:
      LC_ALL: C.UTF-8
  java:
    command: jdk/bin/java
    plugs:
    # Adds the interfaces of the GNOME Snapcraft Extensions plus 'network'
    - desktop
    - desktop-legacy
    - gsettings
    - network
    - opengl
    - wayland
    - x11
    environment:
      LC_ALL: C.UTF-8
      XAUTHORITY: $SNAP_REAL_HOME/.Xauthority
  javac:
    command: jdk/bin/javac
    environment:
      LC_ALL: C.UTF-8
  javadoc:
    command: jdk/bin/javadoc
    environment:
      LC_ALL: C.UTF-8
  jar:
    command: jdk/bin/jar
    environment:
      LC_ALL: C.UTF-8
  jarsigner:
    command: jdk/bin/jarsigner
    environment:
      LC_ALL: C.UTF-8
  jlink:
    command: jdk/bin/jlink
    environment:
      LC_ALL: C.UTF-8

parts:
  bin:
    plugin: dump
    source: .
    source-type: local
    stage: [bin]

  jdk:
    plugin: autotools
    source: https://github.com/openjdk/jdk20u.git
    source-type: git
    source-tag: jdk-$SNAPCRAFT_PROJECT_VERSION
    source-depth: 1
    build-snaps:
    - bootjdk/latest/candidate
    build-packages:
    - curl
    - libasound2-dev
    - libcups2-dev
    - libfontconfig1-dev
    - libfreetype6-dev
    - libx11-dev
    - libxext-dev
    - libxrandr-dev
    - libxrender-dev
    - libxt-dev
    - libxtst-dev
    - unzip
    - zip
    override-pull: |
      release=20
      giturl=https://github.com/openjdk/jdk20u.git
      tagurl=https://github.com/openjdk/jdk20u/tags.atom

      # Gets the version from the latest release tag on GitHub
      #   $1 = feature release number (formerly "major" version)
      #   $2 = URL of Atom web feed providing recent tags
      getversion() {
          local feature=$1
          local webfeed=$2
          curl -s "$webfeed" | grep "<title>jdk-${feature}[.0-9]*+[^0]" \
              | sed -E -e '1!d' -e 's| *<title>jdk-(.*)</title>|\1|'
      }

      # Sets the version and saves its environment variable
      #   $1 = the version string
      setversion() {
          snapcraftctl set-version "$1"
          printf "export SNAPCRAFT_PROJECT_VERSION=%s\n" "$1" \
              > /tmp/snapcraft-project-version
      }

      # See https://forum.snapcraft.io/t/17597
      if [ -z "$SNAPCRAFT_PROJECT_VERSION" ]; then
          version=$(getversion $release $tagurl)
          setversion "$version"
          git clone --branch "jdk-$version" --depth 1 \
              $giturl "$SNAPCRAFT_PART_SRC"
      else
          snapcraftctl pull
      fi
    build-environment:
    - JAVA_HOME: /snap/bootjdk/current/jdk
    override-build: |
      # Loads the version environment variable if not defined
      if [ -z "$SNAPCRAFT_PROJECT_VERSION" ]; then
          . /tmp/snapcraft-project-version
      fi

      # Sets the environment variable for reproducible builds
      SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)
      export SOURCE_DATE_EPOCH

      # Builds the JDK ('--enable-warnings-as-errors=no' for armhf)
      bash configure \
          --enable-warnings-as-errors=no \
          --enable-javac-server=no \
          --with-vendor-name="Snap Build" \
          --with-vendor-url="https://snapcraft.io/bootjdk" \
          --with-vendor-bug-url="https://github.com/jgneff/bootjdk/discussions" \
          --with-version-pre=no \
          --with-version-opt=snap \
          --with-version-build="${SNAPCRAFT_PROJECT_VERSION#*+}" \
          --with-extra-cflags="$CFLAGS" \
          --with-extra-cxxflags="$CXXFLAGS" \
          --with-extra-ldflags="$LDFLAGS" \
          --with-native-debug-symbols=none
      make images docs

      # Installs the build output
      cd build/linux-*-server-release/images || exit
      mv jdk docs "$SNAPCRAFT_PART_INSTALL"
    organize:
      docs: jdk/docs
    stage-packages:
    # Adds all DejaVu fonts and the 'jlink' dependencies
    - binutils
    - fonts-dejavu-extra
    # Adds library packages suggested by Snapcraft plus 'libfontconfig1'
    - libasound2
    - libfontconfig1
    - libfreetype6
    - libpng16-16
    - libx11-6
    - libxau6
    - libxcb1
    - libxdmcp6
    - libxext6
    - libxi6
    - libxrender1
    - libxtst6

  del:
    after: [jdk]
    plugin: nil
    # Deletes files and links already available in the base snap
    override-prime: |
      cd "$SNAPCRAFT_PRIME" || exit
      base=/snap/core18/current
      for d in etc lib usr/lib usr/share; do
          find "$d" -type f -exec test -f "$base/{}" \; -delete
          find "$d" -type l -exec test -L "$base/{}" \; -delete
      done
      find ./* -type d -empty -exec test -d "$base/{}" \; -delete

layout:
  # For Java Swing apps

  # Fontconfig error: Cannot load config file from /etc/fonts/fonts.conf
  /etc/fonts:
    bind: $SNAP/etc/fonts
  # Exception in thread "AWT-EventQueue-0" java.lang.InternalError:
  # java.lang.reflect.InvocationTargetException
  # Caused by: java.lang.NullPointerException: Cannot load from short array
  # because "sun.awt.FontConfiguration.head" is null
  /usr/share/fonts/truetype/dejavu:
    bind: $SNAP/usr/share/fonts/truetype/dejavu
